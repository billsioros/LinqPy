{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"Querpyable <p>A Python implementation of LINQ</p> <p> </p>"},{"location":"#example","title":"Example","text":"<pre><code># Calculating the first 10000 primes\nprimes = (\n    Queryable.range(2, 1_000_000)\n    .where(lambda n: all(n % i != 0 for i in range(2, int(n**0.5) + 1)))\n    .take(10000)\n    .to_list()\n)\n\n# Calculating Factorials using Aggregate:\nfactorial = (\n    Queryable\n    .range(1, 5)\n    .aggregate(lambda result, current: result * current)\n)\n\n# Finding Palindromic Words in a List:\nwords = [\"level\", \"hello\", \"world\", \"radar\", \"LINQ\", \"civic\"]\npalindromic_words = (\n    Queryable(words)\n    .where(lambda word: word == word[::-1])\n    .to_list()\n)\n\n# Selecting Unique Characters from a Sentence:\nsentence = \"LINQ is fun and powerful\"\nunique_characters = (\n    Queryable(sentence)\n    .where(lambda char: char.isalpha())\n    .select(lambda char: char.lower())\n    .distinct()\n    .to_list()\n)\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install querpyable\n</code></pre> <p>In order to locally set up the project please follow the instructions below:</p> <pre><code># Set up the GitHub repository\ngit clone https://github.com/billsioros/querpyable\n\n# Create a virtual environment using poetry and install the required dependencies\npoetry shell\npoetry install\n\n# Install pre-commit hooks\npre-commit install --install-hooks\npre-commit autoupdate\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>The project's documentation can be found here.</p>"},{"location":"#support-the-project","title":"Support the project","text":"<p>Feel free to Buy me a coffee! \u2615.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you would like to contribute to the project, please go through the Contributing Guidelines first.</p>"},{"location":"#credits","title":"Credits","text":"<p>This project was generated with <code>billsioros/cookiecutter-pypackage</code> cookiecutter template.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>This project adheres to Semantic Versioning. See Conventional Commits for commit guidelines.</p>"},{"location":"CHANGELOG/#v300-2024-03-09","title":"v3.0.0 (2024-03-09)","text":""},{"location":"CHANGELOG/#feature","title":"Feature","text":"<ul> <li>Opt for functions instead of classes (<code>94f3e9d</code>)</li> </ul>"},{"location":"CHANGELOG/#breaking","title":"Breaking","text":"<ul> <li>opt for functions instead of classes (<code>94f3e9d</code>)</li> </ul> <p>See all commits in this version</p>"},{"location":"CHANGELOG/#v204-2024-03-04","title":"v2.0.4 (2024-03-04)","text":""},{"location":"CHANGELOG/#fix","title":"Fix","text":"<ul> <li>Deprecate <code>python&lt;3.9</code> (<code>b7282b6</code>)</li> </ul> <p>See all commits in this version</p>"},{"location":"CHANGELOG/#v203-2024-03-04","title":"v2.0.3 (2024-03-04)","text":""},{"location":"CHANGELOG/#fix_1","title":"Fix","text":"<ul> <li>Trigger deployment (<code>3214600</code>)</li> <li>Downgrade <code>semantic-release</code> version (<code>12cd474</code>)</li> </ul> <p>See all commits in this version</p>"},{"location":"CHANGELOG/#v202-2024-03-04","title":"v2.0.2 (2024-03-04)","text":""},{"location":"CHANGELOG/#fix_2","title":"Fix","text":"<ul> <li>Trigger deployment (<code>111541b</code>)</li> </ul> <p>See all commits in this version</p>"},{"location":"CHANGELOG/#v201-2024-03-04","title":"v2.0.1 (2024-03-04)","text":""},{"location":"CHANGELOG/#fix_3","title":"Fix","text":"<ul> <li>Incorporate <code>cruft</code> (<code>20865c4</code>)</li> </ul> <p>See all commits in this version</p>"},{"location":"CHANGELOG/#v200-2023-05-22","title":"v2.0.0 (2023-05-22)","text":""},{"location":"CHANGELOG/#feature_1","title":"Feature","text":"<ul> <li>Rename package (<code>e90b26d</code>)</li> </ul>"},{"location":"CHANGELOG/#breaking_1","title":"Breaking","text":"<ul> <li>rename package (<code>e90b26d</code>)</li> </ul> <p>See all commits in this version</p>"},{"location":"CHANGELOG/#v100-2023-05-21","title":"v1.0.0 (2023-05-21)","text":""},{"location":"CHANGELOG/#feature_2","title":"Feature","text":"<ul> <li>Pypi name (<code>08ab3fe</code>)</li> </ul>"},{"location":"CHANGELOG/#breaking_2","title":"Breaking","text":"<ul> <li>pypi name (<code>08ab3fe</code>)</li> </ul> <p>See all commits in this version</p>"},{"location":"CHANGELOG/#v010-2023-05-21","title":"v0.1.0 (2023-05-21)","text":""},{"location":"CHANGELOG/#feature_3","title":"Feature","text":"<ul> <li>Initial commit (<code>0accfb4</code>)</li> </ul>"},{"location":"CHANGELOG/#fix_4","title":"Fix","text":"<ul> <li>Aligning with the test suite (<code>f7d8508</code>)</li> </ul> <p>See all commits in this version</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting one of the project maintainers listed below. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT/#project-maintainers","title":"Project Maintainers","text":"<ul> <li>Vasilis Sioros &lt;billsioros97@gmail.com&gt;</li> </ul>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>Hello and thank you for considering contributing to querpyable!</p> <p>Reading and following these guidelines will help us make the contribution process easy and effective for everyone involved.</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>By participating and contributing to this project, you agree to uphold our Code of Conduct.</p>"},{"location":"CONTRIBUTING/#getting-help","title":"Getting Help","text":"<p>In case all you need is an answer to a question, please refrain from opening an issue and instead visit the project's discussion page.</p>"},{"location":"CONTRIBUTING/#getting-started","title":"Getting Started","text":"<p>Contributions are made to this repository via Issues and Pull Requests (PRs). A few general guidelines that cover both:</p> <ul> <li>Search for existing Issues and PRs before creating your own.</li> <li>We work hard to make sure issues are handled in a timely manner but, depending on the impact, it could take a while to investigate the root cause. A friendly ping in the comment thread to the submitter or a contributor can help draw attention if your issue is blocking.</li> </ul>"},{"location":"CONTRIBUTING/#issues","title":"Issues","text":"<p>Issues should be used to report problems with the library or request a new feature or documentation change. When you create a new Issue, a template will be loaded that will guide you through collecting and providing the required information.</p> <p>If you find an Issue that addresses the problem you're having, please add your own reproduction information to the existing issue rather than creating a new one. Adding a reaction can also help in indicating to our maintainers that a particular problem is affecting more than just the reporter.</p>"},{"location":"CONTRIBUTING/#pull-requests","title":"Pull Requests","text":"<p>PRs can be a quick way to get your fix or improvement slated for the next release. In general, PRs should:</p> <ul> <li>Only fix/add the functionality in question OR address wide-spread whitespace/style issues, not both.</li> <li>Address a single concern in the least number of changed lines as possible.</li> <li>Be accompanied by a complete Pull Request template (loaded automatically when a PR is created).</li> <li>Add unit or integration tests for added or changed functionality.</li> <li>Any code related changes should be accompanied by corresponding changes to the project's documentation.</li> <li>If your pull request introduces a new feature, the corresponding <code>README</code> section must be updated to reflect this.</li> <li>Write clear, concise commit message(s) using the Conventional Commits format. Why?</li> <li>This project only accepts pull requests related to open issues. In case there is no relevant open issue, feel free to create one.</li> </ul> <p>For changes that address core functionality or would require breaking changes (e.g. a major release), it's best to open an Issue to discuss your proposal first. This is not required but can save time creating and reviewing changes.</p> <p>In general, we follow the \"fork-and-pull\" Git workflow</p> <ol> <li>Fork the repository to your own Github account</li> <li>Clone the project to your machine</li> <li>Create a branch locally with a succinct but descriptive name</li> <li>Commit changes to the branch</li> <li>Push changes to your fork</li> <li>Open a PR in our repository and follow the PR template so that we can efficiently review the changes</li> </ol>"},{"location":"CONTRIBUTING/#setting-up-a-local-development-environment","title":"Setting up a local development environment","text":"<p>The following sections assume that you have already locally cloned the repository.</p>"},{"location":"CONTRIBUTING/#installing-poetry","title":"Installing Poetry","text":"<p>The querpyable project utilizes the Poetry Python package manager. Having installed Poetry in the global namespace you may now run <code>poetry shell</code> to create a brand new virtual environment and <code>poetry install</code>, in order to install the project's dependencies (development dependencies as well).</p>"},{"location":"CONTRIBUTING/#installing-pre-commit-hooks","title":"Installing pre-commit hooks","text":"<p>The project utilizes the pre-commit framework. Having created a virtual environment and installed the required dependencies, you may run <code>pre-commit install --install-hooks</code> to install the git hook scripts.</p>"},{"location":"CONTRIBUTING/#testing-via-pytest","title":"Testing via <code>pytest</code>","text":"<p>We are using pytest to automate testing on multiple environments.</p> <p>The test suite can be run using <code>poetry run poe test</code>.</p>"},{"location":"CONTRIBUTING/#optional-installing-pyenv","title":"(Optional) Installing pyenv","text":"<p>pyenv is used, in the context of the querpyable project, in order to determine the project's compatibility with various versions of Python. Installing <code>pyenv</code> is not strictly required, but it is recommended.</p> <p>Having installed <code>pyenv</code> in the global namespace, you may now run the following snippet, in order to install Python 3.7, 3.8 and 3.9, which, at the time of writing this document, are the only Python versions, supported by querpyable.</p> <pre><code>pyenv install 3.7.10 3.8.9 3.9.4\npyenv local 3.7.10 3.8.9 3.9.4\n</code></pre> <p>Feel free to read more about using <code>pyenv</code>, in the context of <code>poetry</code>, here.</p>"},{"location":"CONTRIBUTING/#performing-development-operations-via-poethepoet","title":"Performing development operations via <code>poethepoet</code>","text":"<p>We are using poethepoet, to perform various development oriented tasks.</p> <p>Formatting, type-checking, running the test suite, as well as a few other operations, can be performed by running <code>poe &lt;task&gt;</code>. Please run <code>poe --help</code> (or <code>poetry run poe --help</code>), to list all available operations.</p>"},{"location":"CONTRIBUTING/#documenting-your-changes","title":"Documenting your changes","text":"<p>querpyable utilizes MkDocs to build and deploy its documentation to GitHub Pages. The documentation is auto-generated from the python docstrings throughout the source code. As a result, any code related change should be accompanied by a corresponding change to the method's / class's docstring.</p> <p>Having made your changes, please run <code>poe docs</code> and make sure that no error is being raised on build time. Afterwards, open <code>http://localhost:8000/</code> in your browser of choice and make sure that the documentation renders correctly.</p>"},{"location":"CONTRIBUTING/#writing-your-commit-message","title":"Writing your commit message","text":"<p>The project's version number and Changelog, depend on a consistent commit history. As a result, your commit message's format is extremely important. Before opening a pull request, please make sure that your commits strictly follow the Conventional Commits format].</p>"},{"location":"CONTRIBUTING/#creating-a-pull-request","title":"Creating a pull request","text":"<p>Make sure you review our Pull Request Guidelines, before initiating a PR.</p>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024-2024 Vasilis Sioros (billsioros)</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"src/querpyable/","title":"Code Reference","text":"<p>             Bases: <code>Iterable[T]</code></p> <p>Parameters:</p> Name Type Description Default <code>collection</code> <code>Iterable[T]</code> <p>The collection to be queried.</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>This method does not return any value.</p> Example <pre><code># Example Usage:\ndata = [1, 2, 3, 4, 5]\nqueryable_data = Queryable(data)\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.aggregate","title":"<code>aggregate(func)</code>","text":"<p>Aggregates the elements of the sequence using a specified binary function.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable[[T, T], T]</code> <p>A binary function that takes two elements of the sequence and returns a single aggregated result.</p> required <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>The result of aggregating the elements using the specified function.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the sequence is empty and cannot be aggregated.</p> Example <pre><code># Example 1: Aggregating a list of numbers using the addition function\nnumbers = [1, 2, 3, 4, 5]\nresult = aggregate(numbers, lambda x, y: x + y)\nprint(result)  # Output: 15\n\n# Example 2: Aggregating a list of strings using the concatenation function\nwords = [\"Hello\", \" \", \"World\", \"!\"]\nresult = aggregate(words, lambda x, y: x + y)\nprint(result)  # Output: Hello World!\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.all","title":"<code>all(predicate)</code>","text":"<p>Determines whether all elements of the sequence satisfy a given predicate.</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>Callable[[T], bool]</code> <p>The predicate function to apply to each element.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if all elements satisfy the predicate, False otherwise.</p> Example <pre><code># Example: Check if all numbers are even\nnumbers = Queryable([2, 4, 6, 8])\nresult = numbers.all(lambda x: x % 2 == 0)\nprint(result)  # Output: True\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.any","title":"<code>any(predicate=None)</code>","text":"<p>Determines whether any elements of the sequence satisfy a given predicate.</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>Callable[[T], bool]</code> <p>The predicate function to apply to each element.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if any elements satisfy the predicate, False otherwise.</p> Example <pre><code># Example: Check if any numbers are odd\nnumbers = Queryable([2, 4, 6, 8])\nresult = numbers.any(lambda x: x % 2 != 0)\nprint(result)  # Output: False\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.average","title":"<code>average()</code>","text":"<p>Calculates the average of all elements in the sequence.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The average of all elements in the sequence.</p> Example <pre><code># Example: Calculate the average of a list of numbers\nnumbers = Queryable([1, 2, 3, 4, 5])\nresult = numbers.average()\nprint(result)  # Output: 3\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.concat","title":"<code>concat(other)</code>","text":"<p>Concatenates the elements of the current Queryable with the elements from another iterable.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Iterable[T]</code> <p>Another iterable whose elements will be appended to the current Queryable.</p> required <p>Returns:</p> Type Description <code>Queryable[T]</code> <p>Queryable[T]: A new Queryable containing the concatenated elements.</p> Example <pre><code># Create a Queryable with initial elements\nqueryable1 = Queryable([1, 2, 3])\n\n# Another iterable to concatenate\nother_iterable = [4, 5, 6]\n\n# Concatenate the two iterables\nresult_queryable = queryable1.concat(other_iterable)\n\n# Result Queryable contains elements from both iterables\nassert list(result_queryable) == [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.contains","title":"<code>contains(value)</code>","text":"<p>Determines whether the sequence contains a specific value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p>The value to check for in the sequence.</p> required <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>True if the sequence contains the value, False otherwise.</p> Example <pre><code># Example: Check if a list contains a specific element\nnumbers = Queryable([1, 2, 3, 4])\nresult = numbers.contains(3)\nprint(result)  # Output: True\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.count","title":"<code>count(predicate=None)</code>","text":"<p>Counts the number of elements in the sequence or those satisfying a given predicate.</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>Callable[[T], bool]</code> <p>The predicate function to filter elements.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of elements in the sequence or satisfying the predicate.</p> Example <pre><code># Example: Count the number of even numbers\nnumbers = Queryable([1, 2, 3, 4, 5, 6])\nresult = numbers.count(lambda x: x % 2 == 0)\nprint(result)  # Output: 3\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.default_if_empty","title":"<code>default_if_empty(default)</code>","text":"<p>Returns a new Queryable with a default value if the sequence is empty.</p> <p>Parameters:</p> Name Type Description Default <code>default</code> <code>T</code> <p>The default value to include in the new Queryable if the sequence is empty.</p> required <p>Returns:</p> Type Description <code>Queryable[T]</code> <p>Queryable[T]: A new Queryable containing the original elements or the default value.</p> Example <pre><code># Example: Provide a default value for an empty list\nempty_list = Queryable([])\nresult = empty_list.default_if_empty(default=0).to_list()\nprint(result)  # Output: [0]\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.distinct","title":"<code>distinct()</code>","text":"<p>Returns a new Queryable containing distinct elements from the original Queryable.</p> <p>Returns:</p> Name Type Description <code>Queryable</code> <code>Queryable[T]</code> <p>A new Queryable with distinct elements.</p> Example <pre><code>data = [1, 2, 2, 3, 4, 4, 5]\nqueryable_data = Queryable(data)\n\ndistinct_queryable = queryable_data.distinct()\n\n# Result: Queryable([1, 2, 3, 4, 5])\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.element_at","title":"<code>element_at(index)</code>","text":"<p>Returns the element at the specified index in the sequence.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index of the element to retrieve.</p> required <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>The element at the specified index.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the sequence contains no element at the specified index.</p> Example <pre><code># Example: Get the element at index 2 in a list\nnumbers = Queryable([1, 2, 3, 4, 5])\nresult = numbers.element_at(2)\nprint(result)  # Output: 3\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.element_at_or_default","title":"<code>element_at_or_default(index, default=None)</code>","text":"<p>Returns the element at the specified index in the sequence, or a default value if none found.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The index of the element to retrieve.</p> required <code>default</code> <code>Optional[T]</code> <p>The default value to return if no element is found at the specified index.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>The element at the specified index, or the default value if none found.</p> Example <pre><code># Example: Get the element at index 5 in a list or return -1 if none found\nnumbers = Queryable([1, 2, 3, 4, 5])\nresult = numbers.element_at_or_default(5, default=-1)\nprint(result)  # Output: -1\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.empty","title":"<code>empty()</code>  <code>classmethod</code>","text":"<p>Create an empty instance of the Queryable class.</p> <p>This class method returns a new Queryable instance initialized with an empty list.</p> <p>Returns:</p> Name Type Description <code>Queryable</code> <code>Queryable[T]</code> <p>A new Queryable instance with an empty list.</p> <p>Examples:</p> <pre><code>empty_queryable = Queryable.empty()\nprint(empty_queryable)  # Output: Queryable([])\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.except_for","title":"<code>except_for(other)</code>","text":"<p>Returns a new Queryable containing elements that are not in the specified sequence.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Iterable[T]</code> <p>Another iterable sequence to exclude from the current sequence.</p> required <p>Returns:</p> Type Description <code>Queryable[T]</code> <p>Queryable[T]: A new Queryable containing elements not present in the specified sequence.</p> Example <pre><code># Example: Exclude common elements from two sets of numbers\nset1 = Queryable([1, 2, 3, 4])\nset2 = [3, 4, 5, 6]\nresult = set1.except_for(set2)\nprint(result)  # Output: Queryable([1, 2])\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.first","title":"<code>first(predicate=None)</code>","text":"<p>Returns the first element of the sequence satisfying the optional predicate.</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>Optional[Callable[[T], bool]]</code> <p>The optional predicate function to filter elements.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>The first element of the sequence satisfying the predicate.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the sequence is empty or no element satisfies the predicate.</p> Example <pre><code># Example: Find the first even number in a list\nnumbers = Queryable([1, 2, 3, 4, 5])\nresult = numbers.first(lambda x: x % 2 == 0)\nprint(result)  # Output: 2\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.first_or_default","title":"<code>first_or_default(predicate=None, default=None)</code>","text":"<p>Returns the first element of the sequence satisfying the optional predicate, or a default value.</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>Callable[[T], bool]</code> <p>The optional predicate function to filter elements.</p> <code>None</code> <code>default</code> <code>Optional[T]</code> <p>The default value to return if no element satisfies the predicate.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>The first element of the sequence satisfying the predicate, or the default value if none found.</p> Example <pre><code># Example: Find the first odd number in a list or return 0 if none found\nnumbers = Queryable([2, 4, 6, 8])\nresult = numbers.first_or_default(lambda x: x % 2 != 0, default=0)\nprint(result)  # Output: 0\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.group_join","title":"<code>group_join(inner, outer_key_selector, inner_key_selector, result_selector)</code>","text":"<p>Performs a group join operation between two sequences.</p> <p>Parameters:</p> Name Type Description Default <code>inner</code> <code>Iterable[U]</code> <p>The inner sequence to join with the outer sequence.</p> required <code>outer_key_selector</code> <code>Callable[[T], K]</code> <p>A function to extract the key from elements in the outer sequence.</p> required <code>inner_key_selector</code> <code>Callable[[U], K]</code> <p>A function to extract the key from elements in the inner sequence.</p> required <code>result_selector</code> <code>Callable[[T, Iterable[U]], V]</code> <p>A function to create a result element from an outer element                                             and its corresponding inner elements.</p> required <p>Returns:</p> Name Type Description <code>Queryable</code> <code>Queryable[T]</code> <p>A new Queryable containing the result of the group join operation.</p> Example <pre><code># Example usage of group_join\n\n# Define two sequences\nouter_sequence = Queryable([1, 2, 3, 4])\ninner_sequence = Queryable([(1, 'a'), (2, 'b'), (2, 'c'), (3, 'd')])\n\n# Perform a group join based on the first element of each tuple\nresult = outer_sequence.group_join(\n    inner_sequence,\n    outer_key_selector=lambda x: x,\n    inner_key_selector=lambda x: x[0],\n    result_selector=lambda outer, inner: (outer, list(inner))\n)\n\n# Display the result\nfor item in result:\n    print(item)\n\n# Output:\n# (1, [('a',)])\n# (2, [('b', 'c')])\n# (3, [('d',)])\n# (4, [])\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.intersect","title":"<code>intersect(other)</code>","text":"<p>Returns a new Queryable containing common elements between two sequences.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Iterable[T]</code> <p>Another iterable sequence to perform the intersection with.</p> required <p>Returns:</p> Type Description <code>Queryable[T]</code> <p>Queryable[T]: A new Queryable containing common elements between both sequences.</p> Example <pre><code># Example: Intersection of two sets of numbers\nset1 = Queryable([1, 2, 3, 4])\nset2 = [3, 4, 5, 6]\nresult = set1.intersect(set2)\nprint(result)  # Output: Queryable([3, 4])\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.join","title":"<code>join(inner, outer_key_selector, inner_key_selector, result_selector)</code>","text":"<p>Joins two iterables based on key selectors and applies a result selector.</p> <p>Parameters:</p> Name Type Description Default <code>inner</code> <code>Iterable[U]</code> <p>The inner iterable to join with.</p> required <code>outer_key_selector</code> <code>Callable[[T], K]</code> <p>The key selector for the outer sequence.</p> required <code>inner_key_selector</code> <code>Callable[[U], K]</code> <p>The key selector for the inner sequence.</p> required <code>result_selector</code> <code>Callable[[T, U], V]</code> <p>The result selector function to apply.</p> required <p>Returns:</p> Name Type Description <code>Queryable</code> <code>Queryable[V]</code> <p>A new Queryable containing the joined elements based on the specified conditions.</p> Example <pre><code># Example: Join two sets of numbers based on common factors\nset1 = Queryable([1, 2, 3, 4])\nset2 = [3, 4, 5, 6]\nresult = set1.join(set2, outer_key_selector=lambda x: x, inner_key_selector=lambda x: x % 3,\n                   result_selector=lambda x, y: (x, y))\nprint(result.to_list())  # Output: [(1, 4), (2, 5), (3, 6)]\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.last","title":"<code>last(predicate=None)</code>","text":"<p>Returns the last element of the sequence satisfying the optional predicate.</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>Optional[Callable[[T], bool]]</code> <p>The optional predicate function to filter elements.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>The last element of the sequence satisfying the predicate.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the sequence is empty or no element satisfies the predicate.</p> Example <pre><code># Example: Find the last even number in a list\nnumbers = Queryable([1, 2, 3, 4, 5])\nresult = numbers.last(lambda x: x % 2 == 0)\nprint(result)  # Output: 4\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.last_or_default","title":"<code>last_or_default(predicate=None, default=None)</code>","text":"<p>Returns the last element of the sequence satisfying the optional predicate, or a default value.</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>Optional[Callable[[T], bool]]</code> <p>The optional predicate function to filter elements.</p> <code>None</code> <code>default</code> <code>Optional[T]</code> <p>The default value to return if no element satisfies the predicate.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>The last element of the sequence satisfying the predicate, or the default value if none found.</p> Example <pre><code># Example: Find the last odd number in a list or return 0 if none found\nnumbers = Queryable([2, 4, 6, 8])\nresult = numbers.last_or_default(lambda x: x % 2 != 0, default=0)\nprint(result)  # Output: 0\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.max","title":"<code>max()</code>","text":"<p>Finds the maximum value among the elements in the sequence.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The maximum value in the sequence.</p> Example <pre><code># Example: Find the maximum value in a list of numbers\nnumbers = Queryable([3, 1, 4, 1, 5, 9, 2])\nresult = numbers.max()\nprint(result)  # Output: 9\n</code></pre> <pre><code>\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.min","title":"<code>min()</code>","text":"<p>Finds the minimum value among the elements in the sequence.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The minimum value in the sequence.</p> Example <pre><code># Example: Find the minimum value in a list of numbers\nnumbers = Queryable([3, 1, 4, 1, 5, 9, 2])\nresult = numbers.min()\nprint(result)  # Output: 1\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.of_type","title":"<code>of_type(type_filter)</code>","text":"<p>Filters the elements of the Queryable to include only items of a specific type.</p> <p>Parameters:</p> Name Type Description Default <code>type_filter</code> <code>type</code> <p>The type to filter the elements by.</p> required <p>Returns:</p> Name Type Description <code>Queryable</code> <code>Queryable[T]</code> <p>A new Queryable containing only elements of the specified type.</p> Example <pre><code># Create a Queryable with mixed types\ndata = [1, \"two\", 3.0, \"four\", 5]\n\n# Create a Queryable instance\nqueryable_data = Queryable(data)\n\n# Filter the Queryable to include only integers\nresult = queryable_data.of_type(int)\n\n# Print the filtered result\nprint(result)  # Output: Queryable([1, 5])\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.order_by","title":"<code>order_by(key_selector)</code>","text":"<p>Orders the elements of the Queryable based on a key selector function.</p> <p>Parameters:</p> Name Type Description Default <code>key_selector</code> <code>Callable[[T], U]</code> <p>A function that takes an element of the Queryable and returns a value used for sorting.</p> required <p>Returns:</p> Name Type Description <code>Queryable</code> <code>Queryable[T]</code> <p>A new Queryable containing the elements sorted based on the key selector.</p> Example <pre><code># Create a Queryable with a list of tuples\ndata = Queryable([(1, \"apple\"), (3, \"banana\"), (2, \"orange\")])\n\n# Order the Queryable based on the first element of each tuple (numeric order)\nresult = data.order_by(lambda x: x[0]).to_list()\n\n# Output: [(1, 'apple'), (2, 'orange'), (3, 'banana')]\nprint(result)\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.order_by_descending","title":"<code>order_by_descending(key_selector)</code>","text":"<p>Orders the elements of the Queryable in descending order based on the specified key selector.</p> <p>Parameters:</p> Name Type Description Default <code>key_selector</code> <code>Callable[[T], U]</code> <p>A function that extracts a comparable key from each element.</p> required <p>Returns:</p> Name Type Description <code>Queryable</code> <code>Queryable[T]</code> <p>A new Queryable with elements sorted in descending order.</p> Example <pre><code># Example usage of order_by_descending method\ndata = [5, 2, 8, 1, 7]\nqueryable_data = Queryable(data)\n\n# Sorting the data in descending order based on the element itself\nresult = queryable_data.order_by_descending(lambda x: x)\n\n# Result: Queryable([8, 7, 5, 2, 1])\n</code></pre> <pre><code># Another example with custom key selector\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\npeople = [Person(\"Alice\", 25), Person(\"Bob\", 30), Person(\"Charlie\", 22)]\nqueryable_people = Queryable(people)\n\n# Sorting people by age in descending order\nresult = queryable_people.order_by_descending(lambda person: person.age)\n\n# Result: Queryable([Person('Bob', 30), Person('Alice', 25), Person('Charlie', 22)])\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.range","title":"<code>range(start, stop=None, step=1)</code>  <code>classmethod</code>","text":"<p>Create a Queryable instance representing a range of integers.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>int</code> <p>The starting value of the range.</p> required <code>stop</code> <code>Optional[int]</code> <p>The end value (exclusive) of the range. If None, start is considered as the stop, and start is set to 0.</p> <code>None</code> <code>step</code> <code>int</code> <p>The step between each pair of consecutive values in the range. Default is 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>Queryable</code> <code>Queryable[int]</code> <p>A Queryable instance representing the specified range of integers.</p> Example <pre><code>result = Queryable.range(1, 5, 2)\nprint(result)\nQueryable([1, 3])\n\nresult = Queryable.range(3)\nprint(result)\nQueryable([0, 1, 2])\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.select","title":"<code>select(selector)</code>","text":"<p>Projects each element of the Queryable using the provided selector function.</p> <p>Parameters:</p> Name Type Description Default <code>selector</code> <code>Callable[[T], U]</code> <p>A function that maps elements of the Queryable to a new value.</p> required <p>Returns:</p> Name Type Description <code>Queryable</code> <code>Queryable[T]</code> <p>A new Queryable containing the results of applying the selector function to each element.</p> Example <pre><code># Example usage of select method\ndef double(x):\n    return x * 2\n\ndata = Queryable([1, 2, 3, 4, 5])\nresult = data.select(double)\n\n# The 'result' Queryable will contain [2, 4, 6, 8, 10]\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.select_many","title":"<code>select_many(selector)</code>","text":"<p>Projects each element of the sequence to an iterable and flattens the resulting sequences into one sequence.</p> <p>Parameters:</p> Name Type Description Default <code>selector</code> <code>Callable[[T], Iterable[U]]</code> <p>A function that transforms each element of the sequence into an iterable.</p> required <p>Returns:</p> Name Type Description <code>Queryable</code> <code>Queryable[T]</code> <p>A new Queryable instance containing the flattened sequence.</p> Example <pre><code># Example usage:\ndef get_digits(n: int) -&gt; Iterable[int]:\n    return (int(digit) for digit in str(n))\n\nnumbers = Queryable([123, 456, 789])\nresult = numbers.select_many(get_digits)\n\nprint(list(result))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.single","title":"<code>single(predicate=None)</code>","text":"<p>Returns the single element of the sequence satisfying the optional predicate.</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>Callable[[T], bool]</code> <p>The optional predicate function to filter elements.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>The single element of the sequence satisfying the predicate.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the sequence is empty, contains more than one element,         or no element satisfies the predicate.</p> Example <pre><code># Example: Find the single even number in a list\nnumbers = Queryable([2, 4, 6, 8])\nresult = numbers.single(lambda x: x % 2 == 0)\nprint(result)  # Output: 2\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.single_or_default","title":"<code>single_or_default(predicate=None, default=None)</code>","text":"<p>Returns the single element of the sequence satisfying the optional predicate, or a default value if no such element is found.</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>Callable[[T], bool]</code> <p>The optional predicate function to filter elements.</p> <code>None</code> <code>default</code> <code>Optional[T]</code> <p>The default value to return if no element satisfies the predicate.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>The single element of the sequence satisfying the predicate, or the default value.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the sequence contains more than one element satisfying the predicate.</p> Example <pre><code># Example: Find the single odd number in a list or return 0 if none found\nnumbers = Queryable([2, 4, 6, 8])\nresult = numbers.single_or_default(lambda x: x % 2 != 0, default=0)\nprint(result)  # Output: 0\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.skip","title":"<code>skip(count)</code>","text":"<p>Skips the specified number of elements from the beginning of the Queryable.</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of elements to skip.</p> required <p>Returns:</p> Name Type Description <code>Queryable</code> <code>Queryable[T]</code> <p>A new Queryable object containing the remaining elements after skipping.</p> Example <pre><code># Create a Queryable with elements [1, 2, 3, 4, 5]\nqueryable = Queryable([1, 2, 3, 4, 5])\n\n# Skip the first 2 elements\nresult = queryable.skip(2)\n\n# The result should contain elements [3, 4, 5]\nassert list(result) == [3, 4, 5]\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.sum","title":"<code>sum()</code>","text":"<p>Calculates the sum of all elements in the sequence.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The sum of all elements in the sequence.</p> Example <pre><code># Example: Calculate the sum of a list of numbers\nnumbers = Queryable([1, 2, 3, 4, 5])\nresult = numbers.sum()\nprint(result)  # Output: 15\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.take","title":"<code>take(count)</code>","text":"<p>Returns a new Queryable containing the first 'count' elements of the current Queryable.</p> <p>Parameters: - count (int): The number of elements to take from the current Queryable.</p> <p>Returns: - Queryable: A new Queryable containing the first 'count' elements.</p> <p>Example: <pre><code># Example usage of take method\ndata = Queryable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nresult = data.take(3)\n\nprint(result.to_list())  # Output: [1, 2, 3]\n</code></pre></p>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.then_by","title":"<code>then_by(key_selector)</code>","text":"<p>Applies a secondary sorting to the elements of the Queryable based on the specified key_selector.</p> <p>Parameters:</p> Name Type Description Default <code>key_selector</code> <code>Callable[[T], U]</code> <p>A function that extracts a key from each element for sorting.</p> required <p>Returns:</p> Name Type Description <code>Queryable</code> <code>Queryable[T]</code> <p>A new Queryable with the elements sorted first by the existing sorting criteria,        and then by the specified key_selector.</p> Example <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\npeople = [\n    Person(\"Alice\", 30),\n    Person(\"Bob\", 25),\n    Person(\"Charlie\", 35),\n]\n\nqueryable_people = Queryable(people)\n\n# Sort by age in ascending order and then by name in ascending order\nsorted_people = queryable_people.order_by(lambda p: p.age).then_by(lambda p: p.name).to_list()\n\n# Result: [Bob(25), Alice(30), Charlie(35)]\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.then_by_descending","title":"<code>then_by_descending(key_selector)</code>","text":"<p>Sorts the elements of the Queryable in descending order based on the specified key selector.</p> <p>Parameters:</p> Name Type Description Default <code>key_selector</code> <code>Callable[[T], U]</code> <p>A function that takes an element of the Queryable and returns a value used for sorting.</p> required <p>Returns:</p> Name Type Description <code>Queryable</code> <code>Queryable[T]</code> <p>A new Queryable with elements sorted in descending order based on the key selector.</p> Example <p><pre><code># Example usage of then_by_descending method\nfrom typing import List\n\nclass Person:\n    def __init__(self, name: str, age: int):\n        self.name = name\n        self.age = age\n\n    def __repr__(self):\n        return f\"Person(name={self.name}, age={self.age})\"\n\npeople: List[Person] = [\n    Person(\"Alice\", 30),\n    Person(\"Bob\", 25),\n    Person(\"Charlie\", 35),\n]\n\n# Create a Queryable from a list of Person objects\nqueryable_people = Queryable(people)\n\n# Sort the people by age in descending order\nsorted_people = queryable_people.then_by_descending(lambda person: person.age)\n\n# Display the sorted list\nprint(sorted_people)\n</code></pre> Output: <pre><code>[Person(name=Charlie, age=35), Person(name=Alice, age=30), Person(name=Bob, age=25)]\n</code></pre></p>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.to_dictionary","title":"<code>to_dictionary(key_selector, value_selector=None)</code>","text":"<p>Converts the Queryable to a dictionary using key and optional value selectors.</p> <p>Parameters:</p> Name Type Description Default <code>key_selector</code> <code>Callable[[T], K]</code> <p>The key selector function.</p> required <code>value_selector</code> <code>Optional[Callable[[T], V]]</code> <p>The optional value selector function.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[K, Union[V, T]]</code> <p>dict[K, V]: A dictionary containing elements of the Queryable.</p> Example <pre><code># Example: Convert Queryable of tuples to a dictionary with the first element as the key\npairs = Queryable([(1, 'one'), (2, 'two'), (3, 'three')])\nresult = pairs.to_dictionary(key_selector=lambda x: x[0], value_selector=lambda x: x[1])\nprint(result)  # Output: {1: 'one', 2: 'two', 3: 'three'}\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.to_list","title":"<code>to_list()</code>","text":"<p>Converts the Queryable to a list.</p> <p>Returns:</p> Type Description <code>list[T]</code> <p>list[T]: A list containing all elements of the Queryable.</p> Example <pre><code># Example: Convert Queryable to a list\nnumbers = Queryable([1, 2, 3, 4, 5])\nresult = numbers.to_list()\nprint(result)  # Output: [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.union","title":"<code>union(other)</code>","text":"<p>Returns a new Queryable containing unique elements from both sequences.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Iterable[T]</code> <p>Another iterable sequence to perform the union with.</p> required <p>Returns:</p> Type Description <code>Queryable[T]</code> <p>Queryable[T]: A new Queryable containing unique elements from both sequences.</p> Example <pre><code># Example: Union of two sets of numbers\nset1 = Queryable([1, 2, 3, 4])\nset2 = [3, 4, 5, 6]\nresult = set1.union(set2)\nprint(result)  # Output: Queryable([1, 2, 3, 4, 5, 6])\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.where","title":"<code>where(predicate)</code>","text":"<p>Filters the elements of the Queryable based on a given predicate.</p> <p>Parameters:</p> Name Type Description Default <code>predicate</code> <code>Callable[[T], bool]</code> <p>A function that takes an element of the Queryable and returns a boolean indicating whether the element should be included in the result.</p> required <p>Returns:</p> Name Type Description <code>Queryable</code> <code>Queryable[T]</code> <p>A new Queryable containing the elements that satisfy the given predicate.</p> Example <pre><code># Create a Queryable with numbers from 1 to 5\nnumbers = Queryable([1, 2, 3, 4, 5])\n\n# Define a predicate to filter even numbers\ndef is_even(n):\n    return n % 2 == 0\n\n# Use the 'where' method to filter even numbers\nresult = numbers.where(is_even)\n\n# Display the result\nprint(list(result))\n# Output: [2, 4]\n</code></pre>"},{"location":"src/querpyable/#querpyable.querpyable.Queryable.zip","title":"<code>zip(other)</code>","text":"<p>Zips the elements of the current Queryable instance with the elements of another iterable.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Iterable[T]</code> <p>The iterable to zip with the current Queryable.</p> required <p>Returns:</p> Type Description <code>Queryable[T]</code> <p>Queryable[T]: A new Queryable instance containing tuples of zipped elements.</p> Example <pre><code>queryable1 = Queryable([1, 2, 3, 4])\nqueryable2 = Queryable(['a', 'b', 'c', 'd'])\nresult = queryable1.zip(queryable2)\n\nlist(result)\n[(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]\n</code></pre>"}]}